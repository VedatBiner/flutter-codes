// ğŸ“ƒ <----- word_actions.dart ----->
//
// kelime gÃ¼ncelleme ve silme metodu
//
// Bu sÃ¼rÃ¼mde:
// - SQLite baÄŸÄ±mlÄ±lÄ±klarÄ± kaldÄ±rÄ±ldÄ±.
// - Firestore iÅŸlemleri iÃ§in WordService kullanÄ±lÄ±yor.
// - BaÅŸarÄ±lÄ± gÃ¼ncelle/sil sonrasÄ± YEREL JSON CACHE (mobil: Documents/*.json, web: localStorage)
//   gÃ¼ncelleniyor ki fihrist gÃ¶rÃ¼nÃ¼mÃ¼ ve hÄ±zlÄ± aÃ§Ä±lÄ±ÅŸ senaryosu tutarlÄ± kalsÄ±n.
//
// Cache gÃ¼ncelleme mantÄ±ÄŸÄ±:
// - GÃ¼ncelle: id ile bul â†’ yoksa (oldSirpca + userEmail) veya (sirpca + userEmail) ile bul â†’ replace et.
// - Sil: id ile bulup sil â†’ yoksa (sirpca + userEmail) ile bulup sil.
// - ArdÄ±ndan SÄ±rpÃ§a'ya gÃ¶re sÄ±ralayÄ±p yaz.
//
// Not: Arama/gÃ¶rÃ¼nÃ¼m tazelemesi iÃ§in parentâ€™tan gelen onUpdated/onDeleted callbackâ€™leri Ã§aÄŸrÄ±lÄ±r.

// ğŸ“Œ Flutter paketleri
import 'package:flutter/material.dart';

/// ğŸ“Œ YardÄ±mcÄ± yÃ¼klemeler burada
import '../constants/color_constants.dart';
import '../constants/serbian_alphabet.dart';
import '../constants/text_constants.dart';
import '../models/word_model.dart';
import '../services/local_cache_service.dart';
import '../services/notification_service.dart';
import '../services/word_service.dart';
import '../utils/confirmation_dialog.dart';
import '../widgets/word_dialog.dart';

// Ä°Ã§eride kullanÄ±m iÃ§in kÃ¼Ã§Ã¼k SÄ±rpÃ§a karÅŸÄ±laÅŸtÄ±rÄ±cÄ± (fihrist sÄ±rasÄ±)
int _compareSerbian(String a, String b) {
  int i = 0;
  while (i < a.length && i < b.length) {
    final ai = serbianAlphabet.indexOf(a[i].toUpperCase());
    final bi = serbianAlphabet.indexOf(b[i].toUpperCase());
    if (ai != bi) return ai.compareTo(bi);
    i++;
  }
  return a.length.compareTo(b.length);
}

// ğŸ“œ kelime gÃ¼ncelleme metodu
//
Future<void> editWord({
  required BuildContext context,
  required Word word,
  required VoidCallback onUpdated,
}) async {
  final updated = await showDialog<Word>(
    context: context,
    barrierDismissible: false,
    builder: (_) => WordDialog(word: word),
  );

  if (updated != null) {
    // ğŸ”¹ Firestore Ã¼zerinde gÃ¼ncelle
    await WordService.instance.updateWord(
      updated,
      userEmail: updated.userEmail,
      oldSirpca: word.sirpca, // sirpca deÄŸiÅŸmiÅŸ olabilir
    );

    // ğŸ”¹ Yerel JSON CACHE gÃ¼ncelle
    final cached = await LocalCacheService.readAll();

    // 1) Ã–nce id ile dene
    int idx = -1;
    if (updated.id != null && updated.id!.isNotEmpty) {
      idx = cached.indexWhere((w) => w.id == updated.id);
    }
    // 2) id bulunamadÄ±ysa eski sirpca + userEmail ya da yeni sirpca + userEmail ile dene
    if (idx < 0) {
      idx = cached.indexWhere(
        (w) =>
            (w.sirpca == word.sirpca && w.userEmail == word.userEmail) ||
            (w.sirpca == updated.sirpca && w.userEmail == updated.userEmail),
      );
    }

    if (idx >= 0) {
      cached[idx] = updated;
    } else {
      // cacheâ€™te yoksa ekleyelim (senkron bozulmasÄ±n)
      cached.add(updated);
    }

    // SÄ±rpÃ§aâ€™ya gÃ¶re sÄ±rala ve yaz
    cached.sort((a, b) => _compareSerbian(a.sirpca, b.sirpca));
    await LocalCacheService.writeAll(cached);

    if (!context.mounted) return;
    onUpdated();

    NotificationService.showCustomNotification(
      context: context,
      title: 'Kelime GÃ¼ncellendi',
      message: RichText(
        text: TextSpan(
          children: [
            TextSpan(text: updated.sirpca, style: kelimeAddText),
            const TextSpan(
              text: ' kelimesi gÃ¼ncellendi.',
              style: normalBlackText,
            ),
          ],
        ),
      ),
      icon: Icons.check_circle,
      iconColor: Colors.green,
      progressIndicatorColor: Colors.green,
      progressIndicatorBackground: Colors.greenAccent,
    );
  }
}

// ğŸ“œ kelime silme metodu
//
Future<void> confirmDelete({
  required BuildContext context,
  required Word word,
  required VoidCallback onDeleted,
}) async {
  final confirm = await showConfirmationDialog(
    context: context,
    title: 'Kelimeyi Sil',
    content: RichText(
      text: TextSpan(
        children: [
          TextSpan(text: word.sirpca, style: kelimeText),
          const TextSpan(
            text: ' kelimesini silmek istiyor musunuz?',
            style: TextStyle(fontSize: 16, color: Colors.black),
          ),
        ],
      ),
    ),
    confirmText: 'Sil',
    cancelText: 'Ä°ptal',
    confirmColor: deleteButtonColor,
  );

  if (confirm == true) {
    // ğŸ”¹ Firestore silme
    await WordService.instance.deleteWord(word, userEmail: word.userEmail);

    // ğŸ”¹ Yerel JSON CACHEâ€™ten Ã§Ä±kar
    final cached = await LocalCacheService.readAll();

    // 1) id ile silmeyi dene
    int idx = -1;
    if (word.id != null && word.id!.isNotEmpty) {
      idx = cached.indexWhere((w) => w.id == word.id);
    }
    // 2) id yoksa (sirpca + userEmail) ile arayÄ±p sil
    if (idx < 0) {
      idx = cached.indexWhere(
        (w) => w.sirpca == word.sirpca && w.userEmail == word.userEmail,
      );
    }

    if (idx >= 0) {
      cached.removeAt(idx);
      // tekrar sÄ±rala ve yaz (opsiyonel ama tutarlÄ±lÄ±k iÃ§in gÃ¼zel)
      cached.sort((a, b) => _compareSerbian(a.sirpca, b.sirpca));
      await LocalCacheService.writeAll(cached);
    }

    if (!context.mounted) return;
    onDeleted();

    NotificationService.showCustomNotification(
      context: context,
      title: 'Kelime Silindi',
      message: RichText(
        text: TextSpan(
          children: [
            TextSpan(text: word.sirpca, style: kelimeText),
            const TextSpan(text: ' kelimesi silindi.', style: normalBlackText),
          ],
        ),
      ),
      icon: Icons.delete,
      iconColor: Colors.red,
      progressIndicatorColor: Colors.red,
      progressIndicatorBackground: Colors.redAccent,
    );
  }
}
