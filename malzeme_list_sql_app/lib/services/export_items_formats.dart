// <ğŸ“œ ----- lib/services/export_items_format.dart ----->
/*
  ğŸ§© Malzeme dÄ±ÅŸa aktarma format yardÄ±mcÄ±larÄ± (CSV & XLSX)

  NE YAPAR?
  - buildWordsCsvNoId:  List<Malzeme> â†’ UTF-8 BOM'lu CSV (baÅŸlÄ±klar: Malzeme, AÃ§Ä±klama, Miktar)
  - buildWordsXlsxNoId: List<Malzeme> â†’ XLSX (baÅŸlÄ±k stili, Freeze Panes, AutoFilter, auto-fit)
  - miktar alanÄ± her zaman TAM SAYI (int) olarak yazÄ±lÄ±r.

  NOTLAR
  - Bu modÃ¼l YALNIZCA iÃ§erik Ã¼retir (String veya Uint8List). Dosyaya kaydetme/indirme
    iÅŸlemi Ã¼st katmanda yapÄ±lÄ±r.
*/

// ğŸ“Œ Dart hazÄ±r paketleri
import 'dart:typed_data';

// ğŸ“Œ 3rd party
import 'package:syncfusion_flutter_xlsio/xlsio.dart' as xlsio;

// ğŸ“Œ Proje baÄŸÄ±mlÄ±lÄ±klarÄ±
import '../models/malzeme_model.dart';

/// ğŸ“Œ CSV Ã¼retimi (UTF-8 BOM + baÅŸlÄ±k) â€” ID YOK â€” miktar = int
String buildWordsCsvNoId(List<Malzeme> list) {
  final headers = ['Malzeme', 'AÃ§Ä±klama', 'Miktar'];
  final sb = StringBuffer();

  // Excel uyumu iÃ§in BOM (UTF-8)
  sb.write('\uFEFF');
  sb.writeln(headers.map(_csvEscape).join(','));

  for (final w in list) {
    // miktarÄ± kesin int 'e Ã§evir
    final int qty = (w.miktar is int)
        ? (w.miktar as int)
        : (w.miktar as num).toInt();

    final row = <String>[
      w.malzeme, // (nullable ise: w.malzeme ?? '')
      w.aciklama ?? '', // String? â†’ String
      qty.toString(), // int â†’ String
    ].map(_csvEscape).join(',');
    sb.writeln(row);
  }
  return sb.toString();
}

String _csvEscape(String v) {
  final needsQuotes =
      v.contains(',') ||
      v.contains('"') ||
      v.contains('\n') ||
      v.contains('\r');
  final out = v.replaceAll('"', '""');
  return needsQuotes ? '"$out"' : out;
}

/// ğŸ“Œ XLSX Ã¼retimi (Freeze Panes + baÅŸlÄ±k stili + AutoFilter + auto-fit) â€” ID YOK â€” miktar = int
Uint8List buildWordsXlsxNoId(List<Malzeme> list) {
  final wb = xlsio.Workbook();
  final sheet = wb.worksheets[0];

  // BaÅŸlÄ±klar
  final headers = ['Malzeme', 'AÃ§Ä±klama', 'Miktar'];
  for (int i = 0; i < headers.length; i++) {
    sheet.getRangeByIndex(1, i + 1).setText(headers[i]);
  }

  // BaÅŸlÄ±k stili
  final headerStyle = wb.styles.add('header');
  headerStyle.bold = true;
  headerStyle.fontColor = '#FFFFFFFF';
  headerStyle.backColor = '#FF0D47A1';
  headerStyle.hAlign = xlsio.HAlignType.center;
  headerStyle.vAlign = xlsio.VAlignType.center;
  sheet.getRangeByIndex(1, 1, 1, headers.length).cellStyle = headerStyle;

  // Freeze Panes
  sheet.getRangeByIndex(2, 1).freezePanes();

  // --- Veri satÄ±rlarÄ± + max uzunluk hesabÄ± (Miktar sÃ¼tunu iÃ§in) ---
  int maxQtyChars = headers[2].length; // "Miktar" = 6
  for (int r = 0; r < list.length; r++) {
    final w = list[r];

    // Malzeme
    sheet.getRangeByIndex(r + 2, 1).setText(w.malzeme);

    // AÃ§Ä±klama (wrap)
    final descCell = sheet.getRangeByIndex(r + 2, 2);
    descCell.setText(w.aciklama ?? '');
    descCell.cellStyle.wrapText = true;

    // Miktar (int olarak)
    final int qty = (w.miktar is int)
        ? (w.miktar as int)
        : (w.miktar as num).toInt();
    final qtyCell = sheet.getRangeByIndex(r + 2, 3);
    qtyCell.setNumber(qty.toDouble());
    qtyCell.numberFormat = '0';

    // En uzun miktar karakter sayÄ±sÄ±nÄ± takip et
    final len = qty.toString().length;
    if (len > maxQtyChars) maxQtyChars = len;
  }

  final lastRow = 1 + list.length;

  // AutoFilter
  sheet.autoFilters.filterRange = sheet.getRangeByIndex(1, 1, lastRow, 3);

  // Auto-fit tÃ¼m sÃ¼tunlar
  sheet.getRangeByIndex(1, 1, lastRow, 3).autoFitColumns();

  // AÃ§Ä±klama sÃ¼tununu biraz geniÅŸlet (gÃ¶rÃ¼nÃ¼rlÃ¼k iÃ§in)
  sheet.getRangeByIndex(1, 2, lastRow, 2).columnWidth = 40;

  // ğŸ”§ Miktar sÃ¼tununu manuel ayarla:
  // karakter tabanlÄ± geniÅŸlik ~ karakter sayÄ±sÄ± + kÃ¼Ã§Ã¼k bir pay
  final double qtyWidth = (maxQtyChars + 2).toDouble(); // +2 kÃ¼Ã§Ã¼k tampon
  sheet.getRangeByIndex(1, 3, lastRow, 3).columnWidth = qtyWidth;

  final bytes = wb.saveAsStream();
  wb.dispose();
  return Uint8List.fromList(bytes);
}
